;; please see copyright notice in ./COPYING

(cond-expand
 (plan9)
 (windows
  (c-system-include "sys/types.h")
  (c-system-include "fcntl.h"))
 (else
  (c-system-include "errno.h")
  (c-system-include "dirent.h")
  (c-system-include "sys/statvfs.h")
  (c-system-include "sys/stat.h")
  (c-system-include "pwd.h")
  (c-system-include "grp.h")
  (c-system-include "time.h")
  ))


;;; 3.1  Errors

;; All POSIX errno defines

(define-c-const int (E2BIG "E2BIG"))
(define-c-const int (EACCES "EACCES"))
(define-c-const int (EADDRINUSE "EADDRINUSE"))
(define-c-const int (EADDRNOTAVAIL "EADDRNOTAVAIL"))
(define-c-const int (EAFNOSUPPORT "EAFNOSUPPORT"))
(define-c-const int (EAGAIN "EAGAIN"))
(define-c-const int (EALREADY "EALREADY"))
(define-c-const int (EBADF "EBADF"))
(define-c-const int (EBADMSG "EBADMSG"))
(define-c-const int (EBUSY "EBUSY"))
(define-c-const int (ECANCELED "ECANCELED"))
(define-c-const int (ECHILD "ECHILD"))
(define-c-const int (ECONNABORTED "ECONNABORTED"))
(define-c-const int (ECONNREFUSED "ECONNREFUSED"))
(define-c-const int (ECONNRESET "ECONNRESET"))
(define-c-const int (EDEADLK "EDEADLK"))
(define-c-const int (EDESTADDRREQ "EDESTADDRREQ"))
(define-c-const int (EDOM "EDOM"))
(define-c-const int (EDQUOT "EDQUOT"))
(define-c-const int (EEXIST "EEXIST"))
(define-c-const int (EFAULT "EFAULT"))
(define-c-const int (EFBIG "EFBIG"))
(define-c-const int (EHOSTUNREACH "EHOSTUNREACH"))
(define-c-const int (EIDRM "EIDRM"))
(define-c-const int (EILSEQ "EILSEQ"))
(define-c-const int (EINPROGRESS "EINPROGRESS"))
(define-c-const int (EINTR "EINTR"))
(define-c-const int (EINVAL "EINVAL"))
(define-c-const int (EIO "EIO"))
(define-c-const int (EISCONN "EISCONN"))
(define-c-const int (EISDIR "EISDIR"))
(define-c-const int (ELOOP "ELOOP"))
(define-c-const int (EMFILE "EMFILE"))
(define-c-const int (EMLINK "EMLINK"))
(define-c-const int (EMSGSIZE "EMSGSIZE"))
(define-c-const int (ENAMETOOLONG "ENAMETOOLONG"))
(define-c-const int (ENETDOWN "ENETDOWN"))
(define-c-const int (ENETRESET "ENETRESET"))
(define-c-const int (ENETUNREACH "ENETUNREACH"))
(define-c-const int (ENFILE "ENFILE"))
(define-c-const int (ENOBUFS "ENOBUFS"))
(define-c-const int (ENODEV "ENODEV"))
(define-c-const int (ENOENT "ENOENT"))
(define-c-const int (ENOEXEC "ENOEXEC"))
(define-c-const int (ENOLCK "ENOLCK"))
(define-c-const int (ENOMEM "ENOMEM"))
(define-c-const int (ENOMSG "ENOMSG"))
(define-c-const int (ENOPROTOOPT "ENOPROTOOPT"))
(define-c-const int (ENOSPC "ENOSPC"))
(define-c-const int (ENOSYS "ENOSYS"))
(define-c-const int (ENOTCONN "ENOTCONN"))
(define-c-const int (ENOTDIR "ENOTDIR"))
(define-c-const int (ENOTEMPTY "ENOTEMPTY"))
(define-c-const int (ENOTRECOVERABLE "ENOTRECOVERABLE"))
(define-c-const int (ENOTSOCK "ENOTSOCK"))
(define-c-const int (ENOTSUP "ENOTSUP"))
(define-c-const int (ENOTTY "ENOTTY"))
(define-c-const int (ENXIO "ENXIO"))
(define-c-const int (EOPNOTSUPP "EOPNOTSUPP"))
(define-c-const int (EOVERFLOW "EOVERFLOW"))
(define-c-const int (EOWNERDEAD "EOWNERDEAD"))
(define-c-const int (EPERM "EPERM"))
(define-c-const int (EPIPE "EPIPE"))
(define-c-const int (EPROTO "EPROTO"))
(define-c-const int (EPROTONOSUPPORT "EPROTONOSUPPORT"))
(define-c-const int (EPROTOTYPE "EPROTOTYPE"))
(define-c-const int (ERANGE "ERANGE"))
(define-c-const int (EROFS "EROFS"))
(define-c-const int (ESPIPE "ESPIPE"))
(define-c-const int (ESRCH "ESRCH"))
(define-c-const int (ESTALE "ESTALE"))
(define-c-const int (ETIMEDOUT "ETIMEDOUT"))
(define-c-const int (ETXTBSY "ETXTBSY"))
(define-c-const int (EWOULDBLOCK "EWOULDBLOCK"))
(define-c-const int (EXDEV "EXDEV"))

(cond-expand
 ((not openbsd)
  (define-c-const int (EMULTIHOP "EMULTIHOP"))
  (define-c-const int (ENOLINK "ENOLINK"))
  ;; STREAMS
  (define-c-const int (ENODATA "ENODATA"))
  (define-c-const int (ENOSR "ENOSR"))
  (define-c-const int (ENOSTR "ENOSTR"))
  (define-c-const int (ETIME "ETIME"))))

(define-c string (%strerror strerror) (int))


;;; 3.2  I/O

(define-c-const int (open/read "O_RDONLY"))
(define-c-const int (open/write "O_WRONLY"))
(define-c-const int (open/read+write "O_RDWR"))
(define-c-const int (open/append "O_APPEND"))
(define-c-const int (open/create "O_CREAT"))
(define-c-const int (open/exclusive "O_EXCL"))
(define-c-const int (open/nofollow "O_NOFOLLOW"))
(define-c-const int (open/truncate "O_TRUNC"))

;;> Opens the given file and returns a file descriptor.

(define-c int (%open open) (string int int))

;;> Closes the given file descriptor.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (%close close) (int))

;;> Duplicates the given file descriptor, returning the new value,
;; or -1 on failure.

(define-c int (%dup dup) (int))


;;; 3.3  File system

(define-c errno (%delete-file unlink) (string))

;;> Creates a new directory with the given mode.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%mkdir mkdir) (string mode_t)))
  (else
   (define-c errno (%create-directory "mkdir_shim") (string int))))

;;> Creates a fifo with the given mode.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%mkfifo mkfifo) (string mode_t))))

;;> Creates a hard link to the first arg from the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%link link) (string string))))

;;> Creates a symbolic link to the first arg from the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(cond-expand
  ((not windows)
   (define-c errno (%symlink symlink) (string string))))


(cond-expand
  ((not windows)
   (define-c-const int PATH_MAX) ;; ~~~~ should be SYMLINK_MAX, but that's not defined in Linux, which is allowed if it's not larger than _POSIX_SYMLINK_MAX
   (define-c int (%readlink readlink) (string string int))))

;;> Renames the first arg to the second.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (%rename rename) (string string))

;;> Deletes the directory named \var{string} from the filesystem.
;;> Does not attempt to delete recursively.
;;> Returns \scheme{#t} on success and \scheme{#f} on failure.

(define-c errno (%rmdir rmdir) (string))

;;> Sets the file permissions as in chmod.

(define-c errno (%chmod chmod) (string mode_t))

;;> Sets the file owner and group

(define-c errno (%chown chown) (string uid_t gid_t))

;;> Seting the file times

(define-c-const int (utimens/at_fdcwd "AT_FDCWD"))
(define-c-const int (utimens/utime_now "UTIME_NOW"))
(define-c-const int (utimens/utime_omit "UTIME_OMIT"))

(define-c-struct timespec
    constructor: (make-posix-timespec seconds nanoseconds)
    predicate: posix-timespec?
  (time_t  tv_sec   posix-timespec:seconds)
  (long    tv_nsec  posix-timespec:nanoseconds))

;;> Truncate the file to the given size.

(define-c errno (%truncate truncate) (string off_t))
(cond-expand
  ((not windows)
   (define-c errno (%ftruncate ftruncate) (int off_t))))

(define-c-int-type fsblkcnt_t) ;; probably a unsigned 64 bit integer
(define-c-int-type fsfilcnt_t) ;; probably a unsigned 64 bit integer

(define-c-struct statvfs
    predicate: statvfs?
  (unsigned-long f_bsize    fs_bsize    fs:bsize) ;;  File system block size.
  (unsigned-long f_frsize   fs_frsize   fs:frsize) ;; Fundamental file system block size.
  (fsblkcnt_t    f_blocks   fs_blocks   fs:blocks) ;; Total number of blocks on file system in units of f_frsize.
  (fsblkcnt_t    f_bfree    fs_bfree    fs:bfree) ;;  Total number of free blocks.
  (fsblkcnt_t    f_bavail   fs_bavail   fs:bavail) ;; Number of free blocks available to non-privileged process.
  (fsfilcnt_t    f_files    fs_files    fs:files) ;;  Total number of file serial numbers.
  (fsfilcnt_t    f_ffree    fs_ffree    fs:ffree) ;;  Total number of free file serial numbers.
  (fsfilcnt_t    f_favail   fs_favail   fs:favail) ;; Number of file serial numbers available to non-privileged process.
  (unsigned-long f_fsid     fs_fsid     fs:fsid) ;;   File system ID.
  (unsigned-long f_flag     fs_flag     fs:flag) ;;   Bit mask of f_flag values.
  (unsigned-long f_namemax  fs_namemax  fs:namemax) ;; Maximum filename length.
  )

(define-c-const int (statvfs/RDONLY "ST_RDONLY")) ;; Read-only file system
(define-c-const int (statvfs/ST_NOSUID "ST_NOSUID")) ;; Does not support the semantics of the ST_ISUID and ST_ISGID file mode bits.

(define-c errno (%statvfs statvfs) (string (result statvfs)))
(define-c errno (%fstatvfs fstatvfs) (int (result statvfs)))

(cond-expand
  (windows
   (c-include-verbatim "filesystem_win32_shim.c")
   (define-c-struct stat
      predicate: stat?
    (dev_t      st_dev      stat:dev)
    (ino_t      st_ino      stat:ino)
    (mode_t     st_mode     stat:mode)
    (nlink_t    st_nlink    stat:nlinks)
    (uid_t      st_uid      stat:uid)
    (gid_t      st_gid      stat:gid)
    (dev_t      st_rdev     stat:rdev)
    (off_t      st_size     stat:size)
    (time_t     st_atime    stat:atime)
    (time_t     st_mtime    stat:mtime)
    (time_t     st_ctime    stat:ctime)))
  (else
   (define-c-struct stat
      predicate: stat?
    (dev_t      st_dev      stat:dev)
    (ino_t      st_ino      stat:ino)
    (mode_t     st_mode     stat:mode)
    (nlink_t    st_nlink    stat:nlinks)
    (uid_t      st_uid      stat:uid)
    (gid_t      st_gid      stat:gid)
    (dev_t      st_rdev     stat:rdev)
    (off_t      st_size     stat:size)
    (blksize_t  st_blksize  stat:blksize)
    (blkcnt_t   st_blocks   stat:blocks)
    ((struct timespec) st_atime    stat:atime)
    ((struct timespec) st_mtime    stat:mtime)
    ((struct timespec) st_ctime    stat:ctime))
   ))

(define-c errno (%stat stat) (string (result stat)))
(define-c errno (%fstat fstat) (int (result stat)))
(cond-expand
  ((not windows)
   (define-c errno (%lstat lstat) (string (result stat)))))

;;> Code for walking directories

(define-c-struct dirent
  (string d_name dirent-name))

;; the automagic finalizer is fragile and incomplete, does not check
;; the type/sanity of its argument at all so e.g. handing it the
;; fixnum 1 segfaults because I assume it's expecting a pointer.
;;
;; It returns SEXP_VOID instead of 0 or -1, and errno does not get set
;; when it is handed an already closed DIR because it checks to see if
;; it's already closed the directory first.

(define-c-type DIR
  finalizer: (%closedir closedir)
  predicate: DIR?)

(define-c (free DIR) (%opendir opendir) (string))
(define-c dirent (%readdir readdir) ((link (pointer DIR))))

(define-c boolean S_ISBLK (mode_t))
(define-c boolean S_ISCHR (mode_t))
(define-c boolean S_ISDIR (mode_t))
(define-c boolean S_ISFIFO (mode_t))
(define-c boolean S_ISREG (mode_t))
(define-c boolean S_ISLNK (mode_t))
(define-c boolean S_ISSOCK (mode_t))

(define-c-const int (posix/path-max "PATH_MAX"))

(define-c non-null-string (%realpath realpath)
  (string (result (array char 4097))))


;;; 3.4  Processes

;;; 3.4.1  Process objects

;;; 3.4.2  Process waiting

;;; 3.4.3  Analysing process status codes

;;; 3.5  Process state

;;> Sets the current umask, returning the previous one.

(define-c mode_t (%umask umask) (mode_t))

;;> Returns the current working directory of the process as a string.

;; Also uses PATH_MAX
(define-c non-null-string (%getcwd getcwd)
  ((result (array char 4097)) (value 4097 int)))

;;> Change the current working directory of the process.

(define-c errno (%chdir chdir) (string))

;;> Returns the current process id.

(define-c pid_t (pid getpid) ()) ;; pid_t return value without sign problem, and cannot fail

;; per the nice(3) OpenBSD man page it looks like it uses setpriority
(define-c int (%nice nice) (int))

(define-c uid_t (user-uid getuid) ())
(define-c gid_t (user-gid getgid) ())
(define-c uid_t (user-effective-uid geteuid) ())
(define-c gid_t (user-effective-gid getegid) ())

(define-c-const int (groups/max "NGROUPS_MAX"))

;; ~~~~~~~~ Max derived from Ubuntu Bionic Beaver
(define-c int (%getgroups getgroups) ((value 65537 int) (result (array gid_t 65537))))


;;; 3.6  User and group database access

;;> \section{\scheme{(user-information name-or-id)}}

;;> Returns the password entry for the given user.  \var{name-or-id}
;;> should be a string indicating the user name, or an integer
;;> for the user id.

(define-c-struct passwd
    predicate: passwd?
  (string  pw_name     passwd:name)
  (string  pw_passwd   passwd:passwd)
  (uid_t   pw_uid      passwd:uid)
  (gid_t   pw_gid      passwd:gid)
  (string  pw_gecos    passwd:gecos)
  (string  pw_dir      passwd:dir)
  (string  pw_shell    passwd:shell))

(define-c (maybe-null passwd) (%getpwuid getpwuid) (uid_t))
(define-c (maybe-null passwd) (%getpwnam getpwnam) (string))

(define-c-struct group
  (string  gr_name     group:name)
  (gid_t   gr_gid      group:gid)
  )

(define-c (maybe-null group) (%getgrgid getgrgid) (gid_t))
(define-c (maybe-null group) (%getgrnam getgrnam) (string))


;;; 3.10  Time

;;> Accessors for the \scheme{timespec} struct.
;;/

;;> Returns the current time as a timespec, clock behavior including
;;> epoch defined by clck-id

(define-c-const int (time-utc "CLOCK_REALTIME"))
(define-c-const int (time-monotonic "CLOCK_MONOTONIC"))

(define-c-int-type clockid_t)

(define-c errno (%clock_gettime clock_gettime) (clockid_t (result timespec)))


;;; 3.11  Environment variables

(define-c errno (%setenv setenv) (string string int))

(define-c errno (%unsetenv unsetenv) (string))


;;; 3.12  Terminal device control

;;> Returns \scheme{#t} if the given port of file descriptor
;;> if backed by a TTY object, and \scheme{#f} otherwise.

(define-c int (%isatty isatty) (int))

#|
;; All terminal procedures except for terminal? will be moved to a new
;; SRFI; this working code is left here for it.

(define-c-const int (tty/name-max "TTY_NAME_MAX"))

(define-c errno (%ttyname_r ttyname_r)
  (int (result (array char 65)) (value 65 int))) ;; should be big enough


;; termios structure and set and get constants, POSIX only

;; input modes for c_iflag

(define-c-const unsigned-long BRKINT)
(define-c-const unsigned-long ICRNL)
(define-c-const unsigned-long IGNBRK)
(define-c-const unsigned-long IGNCR)
(define-c-const unsigned-long IGNPAR)
(define-c-const unsigned-long INLCR)
(define-c-const unsigned-long INPCK)
(define-c-const unsigned-long ISTRIP)
(define-c-const unsigned-long IXANY)
(define-c-const unsigned-long IXON)
(define-c-const unsigned-long IXOFF)
(define-c-const unsigned-long PARMRK)

;; output modes for c_oflag

(define-c-const unsigned-long OPOST)
(define-c-const unsigned-long ONLCR)
(define-c-const unsigned-long OCRNL)
(define-c-const unsigned-long ONOCR)
(define-c-const unsigned-long ONLRET)
;; (define-c-const unsigned-long OFDEL) ;; not in OpenBSD
;; (define-c-const unsigned-long OFILL) ;; not in OpenBSD

;; control modes for hardware control of terminal for c_cflag

(define-c-const unsigned-long CSIZE)
(define-c-const unsigned-long CS5)
(define-c-const unsigned-long CS6)
(define-c-const unsigned-long CS7)
(define-c-const unsigned-long CS8)
(define-c-const unsigned-long CSTOPB)
(define-c-const unsigned-long CREAD)
(define-c-const unsigned-long PARENB)
(define-c-const unsigned-long PARODD)
(define-c-const unsigned-long HUPCL)
(define-c-const unsigned-long CLOCAL)

;; local modes for c_lflag

(define-c-const unsigned-long ECHO)
(define-c-const unsigned-long ECHOE)
(define-c-const unsigned-long ECHOK)
(define-c-const unsigned-long ECHONL)
(define-c-const unsigned-long ICANON)
(define-c-const unsigned-long IEXTEN)
(define-c-const unsigned-long ISIG)
(define-c-const unsigned-long NOFLSH)
(define-c-const unsigned-long TOSTOP)

 ;; the size of the c_cc array, 32 Bionic Beaver, 20 in OpenBSD

(define-c-const int NCCS)

;; c_cc subscripts

(define-c-const unsigned-long VEOF)   ;; canonical mode only
(define-c-const unsigned-long VEOL)   ;; canonical mode only
(define-c-const unsigned-long VERASE) ;; canonical mode only
(define-c-const unsigned-long VINTR)
(define-c-const unsigned-long VKILL)  ;; canonical mode only
(define-c-const unsigned-long VMIN)   ;; minimum number of characters, non-canonical mode only, may have same value as VEOF
(define-c-const unsigned-long VQUIT)
(define-c-const unsigned-long VSTART)
(define-c-const unsigned-long VSTOP)
(define-c-const unsigned-long VSUSP)
(define-c-const unsigned-long VTIME)  ;; minimum time in deciseconds, non-canonical mode only, may have same value as VEOL

;; modes for second argument of tcsetattr

(define-c-const int TCSANOW)   ;; Change attributes immediately
(define-c-const int TCSADRAIN) ;; Change attributes when output has drained
(define-c-const int TCSAFLUSH) ;; Change attributes when output has drained and flush pending input

#|
;; Can not use because FFI doesn't handle arrays like (unsigned-char (c_cc 22)....

;; The following were input into the FFI, moved to aux.c, then
;; term-attrs-cc-element and term-attrs-cc-element-set! were added.
;; They take an array index as an additional argument following the
;; termios struct pointer.

(define-c-struct termios
    predicate: term-attrs?
    constructor: (make-term-attrs)
  (unsigned-long c_iflag term-attrs-iflag term-attrs-iflag-set!)
  (unsigned-long c_oflag term-attrs-oflag term-attrs-oflag-set!)
  (unsigned-long c_cflag term-attrs-cflag term-attrs-cflag-set!)
  (unsigned-long c_lflag term-attrs-lflag term-attrs-lflag-set!)
  ;; (unsigned-char (c_cc NCCS) term-attrs-cc term-attrs-cc-set!)
  )

(define-c errno (%tcgetattr tcgetattr)
  (port-or-fileno (result termios)))

(define-c errno (%tcsetattr tcsetattr)
  (port-or-fileno int termios))
|#

end removal of all but terminal? supporting stubs |#
